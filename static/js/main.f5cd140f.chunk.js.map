{"version":3,"sources":["components/card/card.components.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box-components.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","type","placeholder","onChange","onSearchChange","App","Event","setState","searchField","target","value","state","bind","fetch","then","response","json","users","this","console","log","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uTAGaA,G,kBAAO,SAACC,GAAD,OAEhB,sBAAKC,UAAY,iBAAjB,UACI,qBAAKC,IAAM,UAAUC,IAAO,iEAC5B,mCAAMH,EAAMI,QAAQC,KAApB,OACA,kCAAKL,EAAMI,QAAQE,MAAnB,YCJKC,EAAW,SAAAP,GAAK,OAEzB,qBAAKC,UAAY,YAAjB,SAEKD,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAAK,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQM,UCJ9CC,G,MAAY,SAACX,GAAD,OAErB,uBACIC,UAAY,SACZW,KAAO,SACPC,YAAeb,EAAMa,YACrBC,SAAYd,EAAMe,mBC4CXC,E,kDA9Cb,aACC,IAAD,8BACE,gBAeFD,eAAiB,SAACE,GACW,EAAKC,SAAU,CAACC,YAAaF,EAAMG,OAAOC,SAfrE,EAAKC,MAAQ,CAAEd,SAAS,GACTW,YAAa,KAE5B,EAAKJ,eAAiB,EAAKA,eAAeQ,KAApB,gBALxB,E,gEAUC,IAAD,OACEC,MAAM,8CACAC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACV,SAASoB,S,+BAQ7C,IAAD,EACoCC,KAAKP,MAA/Bd,EADV,EACUA,SAAUW,EADpB,EACoBA,YAIlBW,QAAQC,IAAIF,KAAKP,OACjB,IAAMU,EAAmBxB,EAASyB,QACjC,SAAA7B,GAAO,OAAIA,EAAQC,KAAK6B,cAAcC,SAAShB,EAAYe,kBAE5D,OACE,sBAAKjC,UAAU,MAAf,UACE,wDACA,cAAC,EAAD,CACEY,YAAc,4BACdE,eAAkBc,KAAKd,iBAEzB,cAAC,EAAD,CAAUP,SAAYwB,W,GAxCZI,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBd,MAAK,YAAkD,IAA/Ce,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5cd140f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nexport const Card = (props) => \r\n(\r\n    <div className = 'card-container'>\r\n        <img alt = \"monster\" src = {'http://robohash.org/{props.monster.id}?set=set4&size=180x180'} />\r\n        <h2> {props.monster.name} </h2>\r\n        <p> {props.monster.email} </p>\r\n    </div>\r\n);"," import React from 'react';\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.components';\r\n\r\nexport const CardList = props => \r\n(\r\n    <div className = 'card-list'>\r\n        {/*props.monsters.map(monster => (<h1 key={monster.id}> {monster.name} </h1>))*/}\r\n        {props.monsters.map(monster => (<Card key={monster.id} monster = {monster} />) ) }\r\n    </div>\r\n);","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = (props) => \r\n(\r\n    <input \r\n        className = 'search' \r\n        type = 'search' \r\n        placeholder = {props.placeholder}\r\n        onChange = {props.onSearchChange}\r\n    />\r\n);","import React, { Component } from 'react'\n//import logo from './logo.svg';\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.components';\nimport { SearchBox } from './components/search-box/search-box-components';\n\nclass App extends Component \n{\n  constructor()\n  {\n    super();\n    this.state = { monsters:[] ,\n                   searchField: ' '\n                 };\n    this.onSearchChange = this.onSearchChange.bind(this);\n    //this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() \n  {\n    fetch('https://jsonplaceholder.typicode.com/users')\n         .then(response => response.json())\n         .then(users => this.setState({monsters:users}));\n  }\n\n  onSearchChange = (Event) => {\n                               this.setState ({searchField: Event.target.value});\n                              };\n\n  render()\n  {\n    const { monsters, searchField } = this.state;\n    //const monsters = this.state.monsters;\n    //const searchField = this.state.searchField;\n\n    console.log(this.state);\n    const filteredMonsters = monsters.filter\n    (monster => monster.name.toLowerCase().includes(searchField.toLowerCase()));\n\n    return (\n      <div className='App'>\n        <h1> Catherine's Monsters </h1>\n        <SearchBox\n          placeholder = 'Catherine search monsters'\n          onSearchChange = {this.onSearchChange}\n        /> \n        <CardList monsters = {filteredMonsters} />\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}